set nocompatible              " be iMproved, required
filetype on                   " required

" set the runtime path to include Vundle and initialize
set rtp^=~/Documents/env/dotfile/.vim_min/Vundle.vim

call vundle#begin('~/Documents/env/dotfile/.vim_min')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-utils/vim-man'
Plugin 'lyuts/vim-rtags'
Plugin 'jremmen/vim-ripgrep'
Plugin 'mbbill/undotree'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
Plugin 'jackguo380/vim-lsp-cxx-highlight'

" basic CtrlP
" c-f, c-b mode change
" c-k, c-j up down key
" open selected entry
" new tab          new split
" c-t or c-v       c-x
Plugin 'ctrlpvim/ctrlp.vim'


Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'dracula/vim', { 'name': 'dracula' }
Plugin 'flazz/vim-colorschemes'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable
colorscheme gruvbox
set background=dark

set t_Co=256

" Set utf8 as standard encoding and en_US as the standard language
scriptencoding utf-8
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Show Relative line number
set rnu
set nu

set tabstop=2 softtabstop=2
set shiftwidth=2
set expandtab
set hidden
set smartindent
set nowrap
set noswapfile
set nobackup
set undodir=~/Documents/env/dotfile/.vim_min/undodir
set undofile
set incsearch
set nohlsearch
set scrolloff=4
set colorcolumn=80
set signcolumn=yes

" undotree
nnoremap <F5> :UndotreeToggle<CR>

" vim-rtags
let g:rtagsRcCmd ='/usr/bin/rc'
let g:rtagsLog = '~/Documents/env/dotfile/rtags.log'

"=========================================
" coc.nvim
"========================================= {{{
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

"========================================= }}}

" vim-ripgrep
" :Rg
if executable('rg')
  let g:rg_derive_root='true'
endif

" NERDTree option.
map <F3> :NERDTreeToggle<CR>

" set airline theme
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_powerline_fonts = 1
let g:airline_theme='dracula'


" Automatically removing all trailing whitespace
autocmd BufWritePre * %s/\s\+$//e
